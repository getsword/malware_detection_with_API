import pathlib
import os
from preprocess import mkdir_all, read_file_generator
import json
from interface import test_one,train
from algorithm.kmean import load_KMeans

NAME="_CLUSTER_3"
TRAIN_BLACK=22340   # 最后一个malware训练样本的标号
TRAIN_WHITE= 54682
TEST_BLACK=44682
TEST_WHITE=64682

def label_train(source_path,target_path):
    source_path = pathlib.Path(source_path)
    target_path = pathlib.Path(target_path)
    mkdir_all(target_path)

    # {‘函数名’:[标签1，标签2，。。。]}
    # 顺序和index对应
    print("########## 开始训练K-mean模型  ##########")
    pred_result=train()
    print("########## 训练K-mean模型完毕  ##########")

    # 读取function_index
    # {
    # 'function':{"函数名":[[第1个参数的一维位置(在第几个序列中)，第1个参数的二维位置(是该序列的第几个函数)],[第2个参数的一维位置，第2个参数的二维位置]]},
    # 'length_black':len,
    # }
    with open("tmp"+NAME+"/function_index.json", 'r', encoding='utf-8') as f:
        function_index = json.loads(f.read())
    length_black = function_index['length_black']

    # 读取经过处理的模型
    with open("model"+NAME+"/exist_model.json",'r',encoding="utf-8") as f:
        exist_model=json.loads(f.read())

    # black_exinfo.json
    data=[]
    with open(source_path.joinpath("black_exinfo.json"),'r',encoding='utf-8') as f:
        for line in f.readlines():
            temp={}
            temp['sequence']=json.loads(line)
            temp['label']=1
            data.append(temp)

    # white_exinfo.json
    with open(source_path.joinpath("white_exinfo.json"),'r',encoding='utf-8') as f:
        for line in f.readlines():
            temp={}
            temp['sequence']=json.loads(line)
            temp['label']=0
            data.append(temp)

    print("########## 开始label  ##########")
    # 对于不处理的函数
    for i in range(len(data)):
        for j in range(len(data[i]['sequence'])):
            api_name_end = data[i]['sequence'][j].find('(')
            api_name = data[i]['sequence'][j][:api_name_end]

            # 无参数分支
            if api_name_end == len(data[i]['sequence'][j]) - 2 or (api_name not in exist_model):
                data[i]['sequence'][j]=api_name

    # 对于需要处理的函数
    for key,value in pred_result.items():
        for i,label in enumerate(value):
            i_loc,j_loc,_=function_index['function'][key][i]
            raw=data[i_loc]['sequence'][j_loc]
            data[i_loc]['sequence'][j_loc]=raw[:raw.find('(')]+'_'+str(label)

    with open(target_path.joinpath("train").joinpath("labeled_data.json"),'w',encoding='utf-8') as f:
        for i in data[:TRAIN_BLACK+1]+data[TEST_BLACK+1:TRAIN_WHITE+1]:
            f.write(json.dumps(i,ensure_ascii=False))
            f.write('\n')

    with open(target_path.joinpath("test").joinpath("labeled_data.json"),'w',encoding='utf-8') as f:
        for i in data[TRAIN_BLACK+1:TEST_BLACK+1]+data[TRAIN_WHITE+1:]:
            f.write(json.dumps(i,ensure_ascii=False))
            f.write('\n')
    print("########## label完毕  ##########")




def label_test_one_by_one(source_path,target_path):
    source_path=pathlib.Path(source_path)
    target_path=pathlib.Path(target_path)
    mkdir_all(target_path)

    with open("model"+NAME+"/exist_model.json",'r',encoding="utf-8") as f:
        exist_model=json.loads(f.read())

    apiname2model={}
    apiname2clslabel={}
    for i in exist_model:
        model_root = pathlib.Path('model' + NAME + '/')
        name = i
        model_path = model_root.joinpath(name + '.joblib')
        if not model_path.exists():
            return -1
        model = load_KMeans(model_path)

        map_path = model_root.joinpath(name + '.json')
        with open(map_path, 'r', encoding='utf-8') as f:
            cls2label = json.loads(f.read())
        apiname2model[name]=model
        apiname2clslabel[name]=cls2label

    source_files=[]
    for i in os.listdir(source_path):
        source_files.append(source_path.joinpath(i))

    with open(target_path.joinpath("labeled_data.json"), 'w', encoding='utf-8') as f:
        for file in source_files:
            for line in read_file_generator(file):
                sequences=json.loads(line)
                new_sequences=[]
                for api in sequences:
                    # Fake_BeCreatedEx(SyStem.exe, 212, \"C:\\program\\1.exe\" , direct)
                    api_name_end=api.find('(')
                    api_name=api[:api_name_end]

                    # 无参数分支
                    if api_name_end==len(api)-2 or (api_name not in exist_model):
                        new_sequences.append(api_name)
                        continue

                    # 有参数分支
                    label=test_one(api,apiname2model[api_name],apiname2clslabel[api_name])
                    if label!=-1:
                        new_sequences.append(api_name+'_'+str(label))
                    else:
                        new_sequences.append(api_name)

                f.write(json.dumps(new_sequences,ensure_ascii=False))
                f.write('\n')


if __name__=="__main__":
    label_train('../data/all/','labeled_data'+NAME)
    print('label.py train done! ')
    #label_test('../data/test/','labeled_data'+NAME+'/test/')
    #print('label.py test done! ')
