import torch
import torch.nn as nn
import torch.nn.functional as F
import math



class Out_Embedding(nn.Module):
    def __init__(self, vocab_size, embedding_dim, vectors):
        super(Out_Embedding, self).__init__()
        self.word_embeddings = nn.Embedding(vocab_size, embedding_dim)
        self.word_embeddings = self.word_embeddings.from_pretrained(
            vectors, freeze=True)

    def forward(self, inputs):
        # inputs的形状是(seq_len,batch_size)
        embeddings = self.word_embeddings(inputs)
        # 提取词特征，输出形状为(seq_len,batch_size,embedding_dim)
        embeddings = torch.mean(embeddings,dim=0)
        # [seq_len,batch_size]
        return embeddings