import numpy as np
import pathlib
import random
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import LinearSVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import joblib
from sklearn.metrics import f1_score,accuracy_score,precision_score,recall_score

# naive bayes
# KNN
# logistic
# DT

SEED=2023
random.seed(SEED)
np.random.seed(SEED)

def train(data_path,model_root):
    data_path=pathlib.Path(data_path)
    model_root=pathlib.Path(model_root)
    arr=np.load(data_path)
    X,y=arr['arr_0'],arr['arr_1']

    model_list={
        "NaiveBayes":GaussianNB(),
        "Logistic Regression":LogisticRegression(random_state=SEED),
        "Decision Tree":DecisionTreeClassifier(criterion="entropy",max_depth=5),
        'SVM':LinearSVC(),
    }

    # 分一下训练集和验证集
    train_X,vali_X,train_y,vali_y=train_test_split(X,y,test_size=0.2,random_state=SEED)

    for name,model in model_list.items():
        model.fit(train_X,train_y)
        joblib.dump(model,model_root.joinpath(name+".pkl"))
        pre=model.predict(vali_X)
        # predict_proba()[:,1]
        accuracy,precision,f1,recall=accuracy_score(vali_y,pre),precision_score(vali_y,pre,average="macro"),f1_score(vali_y,pre,average="macro"),recall_score(vali_y,pre,average="macro")
        print("%s vali ------\naccuracy: %.5lf, precision: %.5lf, f1 score: %.5lf, recall: %.5lf \n"%(name,accuracy,precision,f1,recall))

        test("../DNN_data/vector_unlabel_test.npz", "model/", name)

def test(data_path,model_root, model_name):
    data_path = pathlib.Path(data_path)
    model_root = pathlib.Path(model_root)
    arr = np.load(data_path)
    X, y = arr['arr_0'], arr['arr_1']

    model_list = [
        "NaiveBayes",
        "Logistic Regression",
        "Decision Tree",
        "SVM",
    ]

    model=joblib.load(model_root.joinpath(model_name+".pkl"))
    pre=model.predict(X)
    accuracy, precision, f1, recall = accuracy_score(y, pre), precision_score(y, pre, average="macro"), f1_score(y,
                                                                                                                 pre,
                                                                                                                 average="macro"), recall_score(
        y, pre, average="macro")
    print("%s test ------\naccuracy: %.5lf, precision: %.5lf, f1 score: %.5lf, recall: %.5lf \n"%(model_name,accuracy,precision,f1,recall))



if __name__=="__main__":
    train("../DNN_data/vector_unlabel_train.npz", "model/")
